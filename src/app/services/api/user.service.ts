/*
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/T-Systems-MMS/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable, Subject, Subscription }                 from 'rxjs';
import { catchError, takeUntil, tap, share }                 from 'rxjs/operators';

import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for createUser.
 */
export namespace CreateUser {
    /**
     * Parameter map for createUser.
     */
    export interface PartialParamMap {
      /**
       * Created user object
       */
      User: User;
    }

    /**
     * Enumeration of all parameters for createUser.
     */
    export enum Parameters {
      /**
       * Created user object
       */
      User = 'User'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of createUser
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof CreateUser.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for createUsersWithArrayInput.
 */
export namespace CreateUsersWithArrayInput {
    /**
     * Parameter map for createUsersWithArrayInput.
     */
    export interface PartialParamMap {
      /**
       * List of user object
       */
      User: Array<User>;
    }

    /**
     * Enumeration of all parameters for createUsersWithArrayInput.
     */
    export enum Parameters {
      /**
       * List of user object
       */
      User = 'User'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of createUsersWithArrayInput
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof CreateUsersWithArrayInput.PartialParamMap]?: [string, ValidatorFn][]} = {
      User: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for createUsersWithListInput.
 */
export namespace CreateUsersWithListInput {
    /**
     * Parameter map for createUsersWithListInput.
     */
    export interface PartialParamMap {
      /**
       * List of user object
       */
      User: Array<User>;
    }

    /**
     * Enumeration of all parameters for createUsersWithListInput.
     */
    export enum Parameters {
      /**
       * List of user object
       */
      User = 'User'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of createUsersWithListInput
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof CreateUsersWithListInput.PartialParamMap]?: [string, ValidatorFn][]} = {
      User: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for deleteUser.
 */
export namespace DeleteUser {
    /**
     * Parameter map for deleteUser.
     */
    export interface PartialParamMap {
      /**
       * The name that needs to be deleted
       */
      username: string;
    }

    /**
     * Enumeration of all parameters for deleteUser.
     */
    export enum Parameters {
      /**
       * The name that needs to be deleted
       */
      username = 'username'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of deleteUser
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof DeleteUser.PartialParamMap]?: [string, ValidatorFn][]} = {
      username: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getUserByName.
 */
export namespace GetUserByName {
    /**
     * Parameter map for getUserByName.
     */
    export interface PartialParamMap {
      /**
       * The name that needs to be fetched. Use user1 for testing. 
       */
      username: string;
    }

    /**
     * Enumeration of all parameters for getUserByName.
     */
    export enum Parameters {
      /**
       * The name that needs to be fetched. Use user1 for testing. 
       */
      username = 'username'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getUserByName
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetUserByName.PartialParamMap]?: [string, ValidatorFn][]} = {
      username: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for loginUser.
 */
export namespace LoginUser {
    /**
     * Parameter map for loginUser.
     */
    export interface PartialParamMap {
      /**
       * The user name for login
       */
      username: string;
      /**
       * The password for login in clear text
       */
      password: string;
    }

    /**
     * Enumeration of all parameters for loginUser.
     */
    export enum Parameters {
      /**
       * The user name for login
       */
      username = 'username',
      /**
       * The password for login in clear text
       */
      password = 'password'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of loginUser
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof LoginUser.PartialParamMap]?: [string, ValidatorFn][]} = {
      username: [
              ['required', Validators.required],
      ],
      password: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for logoutUser.
 */
export namespace LogoutUser {
    /**
     * Parameter map for logoutUser.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for logoutUser.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of logoutUser
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof LogoutUser.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for updateUser.
 */
export namespace UpdateUser {
    /**
     * Parameter map for updateUser.
     */
    export interface PartialParamMap {
      /**
       * name that need to be updated
       */
      username: string;
      /**
       * Updated user object
       */
      User: User;
    }

    /**
     * Enumeration of all parameters for updateUser.
     */
    export enum Parameters {
      /**
       * name that need to be updated
       */
      username = 'username',
      /**
       * Updated user object
       */
      User = 'User'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of updateUser
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof UpdateUser.PartialParamMap]?: [string, ValidatorFn][]} = {
      username: [
              ['required', Validators.required],
      ],
    };
}



@Injectable({
  providedIn: 'root'
})
export class UserService {

    protected basePath = 'https://petstore.swagger.io/v2';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    private cancelMap: {[key: string]: Subject<any>} = {};

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   * Create user by map.
   * This can only be done by the logged in user.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
   */
  public createUserByMap(
    map: CreateUser.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<any>;
  public createUserByMap(
    map: CreateUser.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpResponse<any>>;
  public createUserByMap(
    map: CreateUser.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpEvent<any>>;
  public createUserByMap(
    map: CreateUser.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false,
    cancelPreviousRequest: boolean = true): Observable<any> {
    return this.createUser(
      map.User,
      observe,
      reportProgress,
      cancelPreviousRequest
    );
  }


    /**
     * Create user
     * This can only be done by the logged in user.
     * @param User Created user object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
     */
    public createUser(User: User, observe?: 'body', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<any>;
    public createUser(User: User, observe?: 'response', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpResponse<any>>;
    public createUser(User: User, observe?: 'events', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpEvent<any>>;
    public createUser(User: User, observe: any = 'body', reportProgress: boolean = false, cancelPreviousRequest: boolean = true): Observable<any> {
        if (User === null || User === undefined) {
            throw new Error('Required parameter User was null or undefined when calling createUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let handle = this.httpClient.post<any>(`${this.configuration.basePath}/user`,
            User,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

        if (cancelPreviousRequest) {
            if (this.cancelMap['createUser']) {
                this.cancelMap['createUser'].next();
            }
            this.cancelMap['createUser'] = 'post'.toUpperCase() === 'GET' ? new Subject<any>() : null;
            if(this.cancelMap['createUser']) {
                handle = handle.pipe(takeUntil(this.cancelMap['createUser']));
            }
        }

        if (typeof this.configuration.beforeHandler === 'function') {
          this.configuration.beforeHandler('createUser', 'post'.toUpperCase());
        }
        let afterSubscription: Subscription;
        const afterHandler = (result: any = null) => {
          if (afterSubscription) {
            afterSubscription.unsubscribe();
          }
          // stop cancellation to prevent calling afterHandler on next service call
          if (cancelPreviousRequest && this.cancelMap['createUser']) {
            this.cancelMap['createUser'].complete();
            delete this.cancelMap['createUser'];
          }
          if (typeof this.configuration.afterHandler === 'function') {
            this.configuration.afterHandler(
              'createUser',
              'post'.toUpperCase(),
              result ? result : new Error('CANCELLED')
            );
          }
        };
        handle = handle.pipe(share());
        afterSubscription = handle.subscribe(
          result => afterHandler(result),
          err => afterHandler(err),
          () => afterHandler()
        );

        if (typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'createUser')));
        }
        return handle;
    }


  /**
   * Creates list of users with given input array by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
   */
  public createUsersWithArrayInputByMap(
    map: CreateUsersWithArrayInput.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<any>;
  public createUsersWithArrayInputByMap(
    map: CreateUsersWithArrayInput.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpResponse<any>>;
  public createUsersWithArrayInputByMap(
    map: CreateUsersWithArrayInput.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpEvent<any>>;
  public createUsersWithArrayInputByMap(
    map: CreateUsersWithArrayInput.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false,
    cancelPreviousRequest: boolean = true): Observable<any> {
    return this.createUsersWithArrayInput(
      map.User,
      observe,
      reportProgress,
      cancelPreviousRequest
    );
  }


    /**
     * Creates list of users with given input array
     * 
     * @param User List of user object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
     */
    public createUsersWithArrayInput(User: Array<User>, observe?: 'body', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<any>;
    public createUsersWithArrayInput(User: Array<User>, observe?: 'response', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpResponse<any>>;
    public createUsersWithArrayInput(User: Array<User>, observe?: 'events', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpEvent<any>>;
    public createUsersWithArrayInput(User: Array<User>, observe: any = 'body', reportProgress: boolean = false, cancelPreviousRequest: boolean = true): Observable<any> {
        if (User === null || User === undefined) {
            throw new Error('Required parameter User was null or undefined when calling createUsersWithArrayInput.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let handle = this.httpClient.post<any>(`${this.configuration.basePath}/user/createWithArray`,
            User,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

        if (cancelPreviousRequest) {
            if (this.cancelMap['createUsersWithArrayInput']) {
                this.cancelMap['createUsersWithArrayInput'].next();
            }
            this.cancelMap['createUsersWithArrayInput'] = 'post'.toUpperCase() === 'GET' ? new Subject<any>() : null;
            if(this.cancelMap['createUsersWithArrayInput']) {
                handle = handle.pipe(takeUntil(this.cancelMap['createUsersWithArrayInput']));
            }
        }

        if (typeof this.configuration.beforeHandler === 'function') {
          this.configuration.beforeHandler('createUsersWithArrayInput', 'post'.toUpperCase());
        }
        let afterSubscription: Subscription;
        const afterHandler = (result: any = null) => {
          if (afterSubscription) {
            afterSubscription.unsubscribe();
          }
          // stop cancellation to prevent calling afterHandler on next service call
          if (cancelPreviousRequest && this.cancelMap['createUsersWithArrayInput']) {
            this.cancelMap['createUsersWithArrayInput'].complete();
            delete this.cancelMap['createUsersWithArrayInput'];
          }
          if (typeof this.configuration.afterHandler === 'function') {
            this.configuration.afterHandler(
              'createUsersWithArrayInput',
              'post'.toUpperCase(),
              result ? result : new Error('CANCELLED')
            );
          }
        };
        handle = handle.pipe(share());
        afterSubscription = handle.subscribe(
          result => afterHandler(result),
          err => afterHandler(err),
          () => afterHandler()
        );

        if (typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'createUsersWithArrayInput')));
        }
        return handle;
    }


  /**
   * Creates list of users with given input array by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
   */
  public createUsersWithListInputByMap(
    map: CreateUsersWithListInput.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<any>;
  public createUsersWithListInputByMap(
    map: CreateUsersWithListInput.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpResponse<any>>;
  public createUsersWithListInputByMap(
    map: CreateUsersWithListInput.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpEvent<any>>;
  public createUsersWithListInputByMap(
    map: CreateUsersWithListInput.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false,
    cancelPreviousRequest: boolean = true): Observable<any> {
    return this.createUsersWithListInput(
      map.User,
      observe,
      reportProgress,
      cancelPreviousRequest
    );
  }


    /**
     * Creates list of users with given input array
     * 
     * @param User List of user object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
     */
    public createUsersWithListInput(User: Array<User>, observe?: 'body', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<any>;
    public createUsersWithListInput(User: Array<User>, observe?: 'response', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpResponse<any>>;
    public createUsersWithListInput(User: Array<User>, observe?: 'events', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpEvent<any>>;
    public createUsersWithListInput(User: Array<User>, observe: any = 'body', reportProgress: boolean = false, cancelPreviousRequest: boolean = true): Observable<any> {
        if (User === null || User === undefined) {
            throw new Error('Required parameter User was null or undefined when calling createUsersWithListInput.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let handle = this.httpClient.post<any>(`${this.configuration.basePath}/user/createWithList`,
            User,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

        if (cancelPreviousRequest) {
            if (this.cancelMap['createUsersWithListInput']) {
                this.cancelMap['createUsersWithListInput'].next();
            }
            this.cancelMap['createUsersWithListInput'] = 'post'.toUpperCase() === 'GET' ? new Subject<any>() : null;
            if(this.cancelMap['createUsersWithListInput']) {
                handle = handle.pipe(takeUntil(this.cancelMap['createUsersWithListInput']));
            }
        }

        if (typeof this.configuration.beforeHandler === 'function') {
          this.configuration.beforeHandler('createUsersWithListInput', 'post'.toUpperCase());
        }
        let afterSubscription: Subscription;
        const afterHandler = (result: any = null) => {
          if (afterSubscription) {
            afterSubscription.unsubscribe();
          }
          // stop cancellation to prevent calling afterHandler on next service call
          if (cancelPreviousRequest && this.cancelMap['createUsersWithListInput']) {
            this.cancelMap['createUsersWithListInput'].complete();
            delete this.cancelMap['createUsersWithListInput'];
          }
          if (typeof this.configuration.afterHandler === 'function') {
            this.configuration.afterHandler(
              'createUsersWithListInput',
              'post'.toUpperCase(),
              result ? result : new Error('CANCELLED')
            );
          }
        };
        handle = handle.pipe(share());
        afterSubscription = handle.subscribe(
          result => afterHandler(result),
          err => afterHandler(err),
          () => afterHandler()
        );

        if (typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'createUsersWithListInput')));
        }
        return handle;
    }


  /**
   * Delete user by map.
   * This can only be done by the logged in user.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
   */
  public deleteUserByMap(
    map: DeleteUser.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<any>;
  public deleteUserByMap(
    map: DeleteUser.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpResponse<any>>;
  public deleteUserByMap(
    map: DeleteUser.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpEvent<any>>;
  public deleteUserByMap(
    map: DeleteUser.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false,
    cancelPreviousRequest: boolean = true): Observable<any> {
    return this.deleteUser(
      map.username,
      observe,
      reportProgress,
      cancelPreviousRequest
    );
  }


    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
     */
    public deleteUser(username: string, observe?: 'body', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<any>;
    public deleteUser(username: string, observe?: 'response', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpResponse<any>>;
    public deleteUser(username: string, observe?: 'events', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpEvent<any>>;
    public deleteUser(username: string, observe: any = 'body', reportProgress: boolean = false, cancelPreviousRequest: boolean = true): Observable<any> {
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling deleteUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        let handle = this.httpClient.delete<any>(`${this.configuration.basePath}/user/${encodeURIComponent(String(username))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

        if (cancelPreviousRequest) {
            if (this.cancelMap['deleteUser']) {
                this.cancelMap['deleteUser'].next();
            }
            this.cancelMap['deleteUser'] = 'delete'.toUpperCase() === 'GET' ? new Subject<any>() : null;
            if(this.cancelMap['deleteUser']) {
                handle = handle.pipe(takeUntil(this.cancelMap['deleteUser']));
            }
        }

        if (typeof this.configuration.beforeHandler === 'function') {
          this.configuration.beforeHandler('deleteUser', 'delete'.toUpperCase());
        }
        let afterSubscription: Subscription;
        const afterHandler = (result: any = null) => {
          if (afterSubscription) {
            afterSubscription.unsubscribe();
          }
          // stop cancellation to prevent calling afterHandler on next service call
          if (cancelPreviousRequest && this.cancelMap['deleteUser']) {
            this.cancelMap['deleteUser'].complete();
            delete this.cancelMap['deleteUser'];
          }
          if (typeof this.configuration.afterHandler === 'function') {
            this.configuration.afterHandler(
              'deleteUser',
              'delete'.toUpperCase(),
              result ? result : new Error('CANCELLED')
            );
          }
        };
        handle = handle.pipe(share());
        afterSubscription = handle.subscribe(
          result => afterHandler(result),
          err => afterHandler(err),
          () => afterHandler()
        );

        if (typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'deleteUser')));
        }
        return handle;
    }


  /**
   * Get user by user name by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
   */
  public getUserByNameByMap(
    map: GetUserByName.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<User>;
  public getUserByNameByMap(
    map: GetUserByName.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpResponse<User>>;
  public getUserByNameByMap(
    map: GetUserByName.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpEvent<User>>;
  public getUserByNameByMap(
    map: GetUserByName.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false,
    cancelPreviousRequest: boolean = true): Observable<any> {
    return this.getUserByName(
      map.username,
      observe,
      reportProgress,
      cancelPreviousRequest
    );
  }


    /**
     * Get user by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
     */
    public getUserByName(username: string, observe?: 'body', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<User>;
    public getUserByName(username: string, observe?: 'response', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpResponse<User>>;
    public getUserByName(username: string, observe?: 'events', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpEvent<User>>;
    public getUserByName(username: string, observe: any = 'body', reportProgress: boolean = false, cancelPreviousRequest: boolean = true): Observable<any> {
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getUserByName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        let handle = this.httpClient.get<User>(`${this.configuration.basePath}/user/${encodeURIComponent(String(username))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

        if (cancelPreviousRequest) {
            if (this.cancelMap['getUserByName']) {
                this.cancelMap['getUserByName'].next();
            }
            this.cancelMap['getUserByName'] = 'get'.toUpperCase() === 'GET' ? new Subject<any>() : null;
            if(this.cancelMap['getUserByName']) {
                handle = handle.pipe(takeUntil(this.cancelMap['getUserByName']));
            }
        }

        if (typeof this.configuration.beforeHandler === 'function') {
          this.configuration.beforeHandler('getUserByName', 'get'.toUpperCase());
        }
        let afterSubscription: Subscription;
        const afterHandler = (result: any = null) => {
          if (afterSubscription) {
            afterSubscription.unsubscribe();
          }
          // stop cancellation to prevent calling afterHandler on next service call
          if (cancelPreviousRequest && this.cancelMap['getUserByName']) {
            this.cancelMap['getUserByName'].complete();
            delete this.cancelMap['getUserByName'];
          }
          if (typeof this.configuration.afterHandler === 'function') {
            this.configuration.afterHandler(
              'getUserByName',
              'get'.toUpperCase(),
              result ? result : new Error('CANCELLED')
            );
          }
        };
        handle = handle.pipe(share());
        afterSubscription = handle.subscribe(
          result => afterHandler(result),
          err => afterHandler(err),
          () => afterHandler()
        );

        if (typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getUserByName')));
        }
        return handle;
    }


  /**
   * Logs user into the system by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
   */
  public loginUserByMap(
    map: LoginUser.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<string>;
  public loginUserByMap(
    map: LoginUser.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpResponse<string>>;
  public loginUserByMap(
    map: LoginUser.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpEvent<string>>;
  public loginUserByMap(
    map: LoginUser.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false,
    cancelPreviousRequest: boolean = true): Observable<any> {
    return this.loginUser(
      map.username,
      map.password,
      observe,
      reportProgress,
      cancelPreviousRequest
    );
  }


    /**
     * Logs user into the system
     * 
     * @param username The user name for login
     * @param password The password for login in clear text
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
     */
    public loginUser(username: string, password: string, observe?: 'body', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<string>;
    public loginUser(username: string, password: string, observe?: 'response', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpResponse<string>>;
    public loginUser(username: string, password: string, observe?: 'events', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpEvent<string>>;
    public loginUser(username: string, password: string, observe: any = 'body', reportProgress: boolean = false, cancelPreviousRequest: boolean = true): Observable<any> {
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling loginUser.');
        }
        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling loginUser.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (username !== undefined && username !== null) {
            queryParameters = queryParameters.set('username', <any>username);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('password', <any>password);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        let handle = this.httpClient.get<string>(`${this.configuration.basePath}/user/login`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

        if (cancelPreviousRequest) {
            if (this.cancelMap['loginUser']) {
                this.cancelMap['loginUser'].next();
            }
            this.cancelMap['loginUser'] = 'get'.toUpperCase() === 'GET' ? new Subject<any>() : null;
            if(this.cancelMap['loginUser']) {
                handle = handle.pipe(takeUntil(this.cancelMap['loginUser']));
            }
        }

        if (typeof this.configuration.beforeHandler === 'function') {
          this.configuration.beforeHandler('loginUser', 'get'.toUpperCase());
        }
        let afterSubscription: Subscription;
        const afterHandler = (result: any = null) => {
          if (afterSubscription) {
            afterSubscription.unsubscribe();
          }
          // stop cancellation to prevent calling afterHandler on next service call
          if (cancelPreviousRequest && this.cancelMap['loginUser']) {
            this.cancelMap['loginUser'].complete();
            delete this.cancelMap['loginUser'];
          }
          if (typeof this.configuration.afterHandler === 'function') {
            this.configuration.afterHandler(
              'loginUser',
              'get'.toUpperCase(),
              result ? result : new Error('CANCELLED')
            );
          }
        };
        handle = handle.pipe(share());
        afterSubscription = handle.subscribe(
          result => afterHandler(result),
          err => afterHandler(err),
          () => afterHandler()
        );

        if (typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'loginUser')));
        }
        return handle;
    }


  /**
   * Logs out current logged in user session by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
   */
  public logoutUserByMap(
    map: LogoutUser.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<any>;
  public logoutUserByMap(
    map: LogoutUser.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpResponse<any>>;
  public logoutUserByMap(
    map: LogoutUser.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpEvent<any>>;
  public logoutUserByMap(
    map: LogoutUser.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false,
    cancelPreviousRequest: boolean = true): Observable<any> {
    return this.logoutUser(
      observe,
      reportProgress,
      cancelPreviousRequest
    );
  }


    /**
     * Logs out current logged in user session
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
     */
    public logoutUser(observe?: 'body', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<any>;
    public logoutUser(observe?: 'response', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpResponse<any>>;
    public logoutUser(observe?: 'events', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpEvent<any>>;
    public logoutUser(observe: any = 'body', reportProgress: boolean = false, cancelPreviousRequest: boolean = true): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        let handle = this.httpClient.get<any>(`${this.configuration.basePath}/user/logout`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

        if (cancelPreviousRequest) {
            if (this.cancelMap['logoutUser']) {
                this.cancelMap['logoutUser'].next();
            }
            this.cancelMap['logoutUser'] = 'get'.toUpperCase() === 'GET' ? new Subject<any>() : null;
            if(this.cancelMap['logoutUser']) {
                handle = handle.pipe(takeUntil(this.cancelMap['logoutUser']));
            }
        }

        if (typeof this.configuration.beforeHandler === 'function') {
          this.configuration.beforeHandler('logoutUser', 'get'.toUpperCase());
        }
        let afterSubscription: Subscription;
        const afterHandler = (result: any = null) => {
          if (afterSubscription) {
            afterSubscription.unsubscribe();
          }
          // stop cancellation to prevent calling afterHandler on next service call
          if (cancelPreviousRequest && this.cancelMap['logoutUser']) {
            this.cancelMap['logoutUser'].complete();
            delete this.cancelMap['logoutUser'];
          }
          if (typeof this.configuration.afterHandler === 'function') {
            this.configuration.afterHandler(
              'logoutUser',
              'get'.toUpperCase(),
              result ? result : new Error('CANCELLED')
            );
          }
        };
        handle = handle.pipe(share());
        afterSubscription = handle.subscribe(
          result => afterHandler(result),
          err => afterHandler(err),
          () => afterHandler()
        );

        if (typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'logoutUser')));
        }
        return handle;
    }


  /**
   * Updated user by map.
   * This can only be done by the logged in user.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
   */
  public updateUserByMap(
    map: UpdateUser.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<any>;
  public updateUserByMap(
    map: UpdateUser.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpResponse<any>>;
  public updateUserByMap(
    map: UpdateUser.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean,
    cancelPreviousRequest?: boolean): Observable<HttpEvent<any>>;
  public updateUserByMap(
    map: UpdateUser.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false,
    cancelPreviousRequest: boolean = true): Observable<any> {
    return this.updateUser(
      map.username,
      map.User,
      observe,
      reportProgress,
      cancelPreviousRequest
    );
  }


    /**
     * Updated user
     * This can only be done by the logged in user.
     * @param username name that need to be updated
     * @param User Updated user object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param cancelPreviousRequest set whether or not the previous request for the same operation should be cancelled if it is still running.
     */
    public updateUser(username: string, User: User, observe?: 'body', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<any>;
    public updateUser(username: string, User: User, observe?: 'response', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpResponse<any>>;
    public updateUser(username: string, User: User, observe?: 'events', reportProgress?: boolean, cancelPreviousRequest?: boolean): Observable<HttpEvent<any>>;
    public updateUser(username: string, User: User, observe: any = 'body', reportProgress: boolean = false, cancelPreviousRequest: boolean = true): Observable<any> {
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updateUser.');
        }
        if (User === null || User === undefined) {
            throw new Error('Required parameter User was null or undefined when calling updateUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let handle = this.httpClient.put<any>(`${this.configuration.basePath}/user/${encodeURIComponent(String(username))}`,
            User,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

        if (cancelPreviousRequest) {
            if (this.cancelMap['updateUser']) {
                this.cancelMap['updateUser'].next();
            }
            this.cancelMap['updateUser'] = 'put'.toUpperCase() === 'GET' ? new Subject<any>() : null;
            if(this.cancelMap['updateUser']) {
                handle = handle.pipe(takeUntil(this.cancelMap['updateUser']));
            }
        }

        if (typeof this.configuration.beforeHandler === 'function') {
          this.configuration.beforeHandler('updateUser', 'put'.toUpperCase());
        }
        let afterSubscription: Subscription;
        const afterHandler = (result: any = null) => {
          if (afterSubscription) {
            afterSubscription.unsubscribe();
          }
          // stop cancellation to prevent calling afterHandler on next service call
          if (cancelPreviousRequest && this.cancelMap['updateUser']) {
            this.cancelMap['updateUser'].complete();
            delete this.cancelMap['updateUser'];
          }
          if (typeof this.configuration.afterHandler === 'function') {
            this.configuration.afterHandler(
              'updateUser',
              'put'.toUpperCase(),
              result ? result : new Error('CANCELLED')
            );
          }
        };
        handle = handle.pipe(share());
        afterSubscription = handle.subscribe(
          result => afterHandler(result),
          err => afterHandler(err),
          () => afterHandler()
        );

        if (typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'updateUser')));
        }
        return handle;
    }

}

export namespace UserService {
  export enum Operations {
    createUser = 'createUser',
    createUsersWithArrayInput = 'createUsersWithArrayInput',
    createUsersWithListInput = 'createUsersWithListInput',
    deleteUser = 'deleteUser',
    getUserByName = 'getUserByName',
    loginUser = 'loginUser',
    logoutUser = 'logoutUser',
    updateUser = 'updateUser'
  }
}
